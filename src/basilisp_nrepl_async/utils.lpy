(ns basilisp-nrepl-async.utils
  (:require [basilisp.set :as set]
            [basilisp.stacktrace :as st]
            [basilisp.string :as str]))

(defmacro error-make [& details]
  "Returns a list from the provided error ``details`` to represent an
  error."
  `(list ~@details))

(defmacro error-add [error & details]
  "Adds additional `details`` to he existing ``error`` list and
  returns it."
  (let [rdetails (reverse details)]
    `(conj ~error ~@rdetails)))

(defmacro error->str [error]
  "Converts the ``error`` list to a human-readable string and returns
  it. Includes stack traces for any embedded exceptions."
  `(apply str (str/join " " ~error)
          (let [excs# (filter (fn [e#]
                                (instance? ~'Exception e#)) ~error)]
            (when-not (empty? excs#)
              (into ["\n\n--exception details--\n"]
                    (for [exc# excs#]
                      (str "\n" (with-out-str (st/print-stack-trace exc#)))))))))

(defmacro with-eprotect [id-or-opts & body]
  "Creates a try/catch wrapper around ``body`` that returns any
exception as an `error` formatted with the `id` in ``id-or-opts``.

 ``id-or-opts`` is either a printable object used as the `id`, or a map with the following keys

 :id The `id`.

 :on-err-str [opt] A function to call if an exception is caught, which
 accepts the formated error message as only argument."
  (let [opt-set #{:id :on-err-str}
        {:keys [id on-err-str]}
        (if (map? id-or-opts)
          (if-not (contains? id-or-opts :id)
            (throw (ValueError "id-or-otps should contain an :id key."))
            (if-not (set/subset? (set (keys id-or-opts)) opt-set)
              (throw (python/ValueError (str "id-or-opts should only contained supported option keys: " opt-set
                                             " , but got " (keys id-or-opts))) )
              id-or-opts))

          {:id id-or-opts})]
    `(try
       (do
         ~@body)
       (catch python/Exception e
         (let [err# (error-make ~id e)]
           (when-let [es-fn# ~on-err-str]
             (es-fn# (error->str err#)))
           {:error err#})))))

